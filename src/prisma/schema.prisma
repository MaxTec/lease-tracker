// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String?
  isActive      Boolean    @default(false)
  role          UserRole  @default(TENANT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  landlord      Landlord?
  tenant        Tenant?
  ticketComments TicketComment[]
  registrationToken String? // For new tenant registration
  registrationTokenExpires DateTime? // Expiry for registration token
}

enum UserRole {
  ADMIN
  LANDLORD
  TENANT
}

// Landlord model
model Landlord {
  id            Int       @id @default(autoincrement())
  userId        Int       @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName   String?
  phone         String
  address       String
  properties    Property[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Tenant model
model Tenant {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone            String
  emergencyContact String?
  leases           Lease[]
  payments         Payment[]
  tickets          Ticket[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Property model
model Property {
  id            Int       @id @default(autoincrement())
  landlordId    Int
  landlord      Landlord  @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  name          String
  address       String
  type          PropertyType
  units         Unit[]
  tickets       Ticket[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum PropertyType {
  APARTMENT
  HOUSE
  COMMERCIAL
  OTHER
}

// Unit model
model Unit {
  id            Int       @id @default(autoincrement())
  propertyId    Int
  property      Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  unitNumber    String
  bedrooms      Int
  bathrooms     Int
  squareFeet    Int
  leases        Lease[]
  tickets       Ticket[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([propertyId, unitNumber])
}

// Lease model
model Lease {
  id            Int       @id @default(autoincrement())
  unitId        Int
  unit          Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  tenantId      Int
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  startDate     DateTime
  endDate       DateTime
  rentAmount    Decimal   @db.Decimal(10, 2)
  depositAmount Decimal   @db.Decimal(10, 2)
  paymentDay    Int       // Day of month when payment is due
  status        LeaseStatus @default(ACTIVE)
  totalPayments Int       @default(0)  // Total number of payments made
  payments      Payment[]
  documents     Document[]
  clauses       LeasesToClauses[]
  rules         LeasesToRules[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING // New status for waiting the tenant's signature on the lease agreement
}

// Payment model
model Payment {
  id            Int       @id @default(autoincrement())
  leaseId       Int
  lease         Lease     @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  tenantId      Int
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  amount        Decimal   @db.Decimal(10, 2)
  dueDate       DateTime
  paidDate      DateTime?
  status        PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod?
  transactionId String?
  paymentNumber Int       @default(0)  // Sequential number of this payment within the lease
  voucher       Voucher?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  CHECK
  OTHER
}

// Voucher model for payment receipts
model Voucher {
  id            Int       @id @default(autoincrement())
  paymentId     Int       @unique
  payment       Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  voucherNumber String    @unique
  generatedDate DateTime  @default(now())
  sentDate      DateTime?
  status        VoucherStatus @default(GENERATED)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum VoucherStatus {
  GENERATED
  SENT
  VIEWED
}

// Document model for lease-related documents
model Document {
  id            Int       @id @default(autoincrement())
  leaseId       Int
  lease         Lease     @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  name          String
  type          DocumentType
  fileUrl       String
  uploadedAt    DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum DocumentType {
  LEASE_AGREEMENT
  ADDENDUM
  INSPECTION_REPORT
  NOTICE
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  PENDING_REVIEW
  RESOLVED
  CLOSED
}

// Support ticket model
model Ticket {
  id          Int           @id @default(autoincrement())
  title       String
  description String        @db.Text
  tenantId    Int
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  propertyId  Int
  property    Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  unitId      Int
  unit        Unit         @relation(fields: [unitId], references: [id], onDelete: Cascade)
  priority    TicketPriority @default(MEDIUM)
  status      TicketStatus  @default(OPEN)
  comments    TicketComment[]
  images      TicketImage[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Ticket comments for updates and follow-ups
model TicketComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId    Int      // To track who made the comment
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Images attached to a ticket for evidence
model TicketImage {
  id        Int      @id @default(autoincrement())
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  url       String
  altText   String?
  createdAt DateTime @default(now())
}

// Predefined lease clauses
model LeaseClause {
  id          Int       @id @default(autoincrement())
  title       String
  content     String    @db.Text
  type        ClauseType
  isActive    Boolean   @default(true)
  leases      LeasesToClauses[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Junction table for many-to-many relationship between Leases and Clauses
model LeasesToClauses {
  id          Int         @id @default(autoincrement())
  leaseId     Int
  lease       Lease       @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  clauseId    Int
  clause      LeaseClause @relation(fields: [clauseId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  order       Int         @default(0)

  @@unique([leaseId, clauseId])
}

// Predefined lease rules
model LeaseRule {
  id          Int       @id @default(autoincrement())
  title       String
  description String    @db.Text
  category    RuleCategory
  isActive    Boolean   @default(true)
  leases      LeasesToRules[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Junction table for many-to-many relationship between Leases and Rules
model LeasesToRules {
  id          Int         @id @default(autoincrement())
  leaseId     Int
  lease       Lease       @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  ruleId      Int
  rule        LeaseRule   @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  order       Int         @default(0)

  @@unique([leaseId, ruleId])
}

enum ClauseType {
  PAYMENT
  MAINTENANCE
  TERMINATION
  SECURITY_DEPOSIT
  UTILITIES
  INSURANCE
  OTHER
}

enum RuleCategory {
  PETS
  SMOKING
  NOISE
  GUESTS
  PARKING
  MAINTENANCE
  ALTERATIONS
  OTHER
} 